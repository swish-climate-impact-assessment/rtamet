#+TITLE:rtamet 
#+AUTHOR: Ivan Hanigan
#+email: ivan.hanigan@anu.edu.au
#+LaTeX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LATEX: \tableofcontents
-----

* Introduction
** source documentation
the software with the meteorology tests is TAMET, available from http://www.apsim.info/Wiki/OtherProducts.ashx and described at
http://www.apsim.info/Wiki/public/Upload/OtherProducts/Using%20TAMET2.htm

http://www.apsim.info/Products/Utilities.aspx
This program was originally developed by B. H. Wall of the CSIRO Div. of Tropical Crops and Pastures in 1977. It performs a range of checks on weather files for consistency. It has been adapted to check APSIM .met files and now comes with a GUI.  

Documentation.
http://www.apsim.info/Portals/0/OtherProducts/Using%20TAMET2.htm
This program was originally developed by B. H. Wall of the CSIRO Div. of Tropical Crops and Pastures in 1977. While the original fortran implementation would produce a (long winded) report, this more modern version comes as a simple GUI that displays potential errors in place, allowing you to directly edit the data and save your changes.

Using the program is simple – After met files are opened (through the file menu), the data is scanned by pressing the lower right button:

Once the file is scanned, the “prev” and “next” buttons allow you to move quickly between any warnings tamet has found. You can make changes to the data and save it.

Parameters for each of the tests can be changed in the ‘Parameters’ panel. The file needs to be ‘scanned’ again before the results of these changes are seen.

The complete list of tests is listed in the ‘Notes’ panel. A thorough description is provided in Wall’s 1977 document, published as –

Wall, B.H. "TAMET: Computer program for processing meteorological data." CSIRO
Australia. Division of Tropical Crops and Pastures.Tropical Agronomy Technical Memorandum (1977): No. 4, 13p.

 
** DESCRIPTION
*** COMMENT DESCRIPTION-code
#+name:DESCRIPTION
#+begin_src R :session *R* :tangle DESCRIPTION :exports none :eval no :padline no
Package: rtamet
Type: Package
Title: R TAMET meteorology data checks
Version: 0.1
Date: 2013-09-02
Author: ivanhanigan
Maintainer: <ivan.hanigan@gmail.com>
Depends: foreign, plyr, sqldf
Description: R versions of  TAMET meteorology data checking tools  (was originally developed by APSIM).
License: GPL (>= 2)

#+end_src

** TODO run tests
#+name:test_project
#+begin_src R :session *R* :tangle no :exports none :eval no
  ################################################################
  # name:test_project
  require(testthat)
  test_dir('tests')
  
#+end_src

** package doc
#+name:rtamet-package
#+begin_src R :session *R* :tangle man/rtamet-package.Rd :exports none :eval no
  \name{rtamet-package}
  \alias{rtamet-package}
  \alias{rtamet}
  \docType{package}
  \title{
  rtamet is an R implementation of the TAMET tool
  }
  \description{
  Tamet examines your met data for a variety of problems. These checks come in two flavours, bounds and discontinuities.
  
  The variable is tested against upper and lower bounds and any transgression is logged.

The aim of this package is to make the TAMET tools for checking Meteorological data available to R users.

The TAMET program (http://www.apsim.info/Products/Utilities.aspx) was originally developed by APSIM, especially  P deVoil and  J Hargreaves based on the work of B. H. Wall of the CSIRO Div. of Tropical Crops and Pastures in 1977. It performs a range of checks on weather files for consistency.
  }
  \details{
  \tabular{ll}{
  Package: \tab rtamet\cr
  Type: \tab Package\cr
  Version: \tab 0.1\cr
  Date: \tab 2013-09-02\cr
  License: \tab GPL2\cr
  }
  ~~ An overview of how to use the package, including the most important functions ~~

  }
  \author{
  Original by APSIM, especially  P deVoil and  J Hargreaves.
  Maintainer: Who to complain to <ivan.hanigan@gmail.com>
  
  }
  \references{
  
  }
  \keyword{ package }
  \seealso{
  ~~ Optional links to other man pages, e.g. ~~
  ~~ \code{\link[<pkg>:<pkg>-package]{<pkg>}} ~~
  }
  \examples{
  ~~ simple examples of the most important functions ~~
  }
  
#+end_src

** README
#+name:DESCRIPTION
#+begin_src R :session *R* :tangle README.md :padline no
TAMET

The aim of this package is to make the TAMET tools for checking Meteorological data available to R users.

The TAMET program [http://www.apsim.info/Portals/0/OtherProducts/Using%20TAMET2.htm] was originally developed by APSIM, especially  P deVoil and  J Hargreaves based on the work of B. H. Wall of the CSIRO Div. of Tropical Crops and Pastures in 1977. It performs a range of checks on weather files for consistency.

Ivan Hanigan
2013-09-02

#+end_src

* Functions
** get_file_extension
*** R-get_file_extension
#+name:get_file_extension
#+begin_src R :session *R* :tangle R/get_file_extension.r :exports none :eval no
  ################################################################
  # name:get_file_extension
  get_file_extension <- function(inputfilepath)
  {
      filename <- basename(inputfilepath)
      filename_split <- strsplit(filename, "\\.")[[1]]
      ext <- filename_split[length(filename_split)]
      return(ext)
  }
#+end_src
*** test-get_file_extension
#+name:get_file_extension
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:get_file_extension

#+end_src
*** man-get_file_extension
#+name:get_file_extension
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:get_file_extension

#+end_src

** read_file
*** R-read_file
#+name:read_file
#+begin_src R :session *R* :tangle R/read_file.r :exports none :eval yes :reports none
  ################################################################
  # name:read_file
  
  read_file <- function(inputfilepath, header=TRUE, sanitise_names = TRUE)
  {
  
    ext <- get_file_extension(inputfilepath)
    # print(ext)
  
    if (ext=="dbf")
    {
      data_frame<-read.dbf(inputfilepath,as.is=TRUE)
    } else if (ext == "dta") {
      data_frame <- read.dta(inputfilepath)
    } else if (ext=="csv" || ext=="txt") {
      csvfilename<-inputfilepath
      data_frame<-read.csv(csvfilename,stringsAsFactors=FALSE,header=header,
                           strip.white=TRUE)
    } else print("Unknown extension")
  
    if(sanitise_names)
      {
        names(data_frame)<-gsub("\\.","_",names(data_frame))
        names(data_frame)<-gsub("_+","_",names(data_frame))
      }
  
    return(data_frame)
  }
  
#+end_src

#+RESULTS: read_file

*** test-read_file
#+name:read_file
#+begin_src R :session *R* :tangle no :exports none :eval no
  
#+end_src

*** man-read_file
#+name:read_file
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:read_file

#+end_src

** tamet
*** R-tamet
#+name:tamet
#+begin_src R :session *R* :tangle R/tamet.r :exports none :eval no
  ################################################################
  # name:tamet
  require(rtamet)
  tamet  <- function(filename,
                     MaxT_column = NA,
                     MaxT_lower = 4.0,
                     MaxT_upper = 50.0,
                     MinT_column = NA,
                     MinT_lower = -12.5,
                     MinT_upper = 32.0,
                     Vprph09_column = NA,
                     Vprph15_column = NA
                     )
    {
      #### TODO Check Input File, especially column names and latitude  ####
      input_df  <- read_file(filename)
      #### Run Temperature Checks ####
  #   Discontinuity_in_minT
  #   Discontinuity_in_maxT
  #   MaxT_outside_limits
      if(!is.na(MaxT_column))
      {
      input_df  <- MaxT_outside_limits(input_data_frame = input_df,
                                       MaxT = MaxT_column,
                                       Upper = MaxT_upper,
                                       Lower = MaxT_lower
                                       )
      }
  #   MinT_outside_limits
      if(!is.na(MinT_column))
      {
      input_df  <- MinT_outside_limits(input_data_frame = input_df,
                                       MinT = MinT_column,
                                       Upper = MinT_upper,
                                       Lower = MinT_lower
                                       )
      }
  #   MaxT_greater_or_equal_MinT
  #   MaxT_is_close_to_MinT_and_not_ overcast
      #### Run Vapour Pressure Checks ####  
  #   Vprph09_equal_vprph15
      if(!is.na(Vprph09_column))
      {
      input_df <- vprph09_equal_vprph15(input_data_frame = input_df,
                            Vprph09 = Vprph09_column,
                            Vprph15 = Vprph15_column
                            )
      }
      #### write report ####
      input_df$any_transgressions  <- ifelse(
        rowSums(
        input_df[,grep("transgression$", names(input_df))]
        ) > 0, 1, 0
        )
      input_df  <- subset(input_df, any_transgressions > 0)
      extension  <- get_file_extension(fpath)
      logname  <- gsub(extension, "qc_transgressions_logged.csv",  fpath)
      write.csv(input_df, logname, row.names=FALSE)
      cat(sprintf("%s Transgressions logged and written to:\n%s", nrow(input_df), logname))
      log <- list()
      log[[1]] <- nrow(input_df)
      log[[2]] <- logname
      invisible(log)
    }
#+end_src
*** test-tamet
#+name:tamet
#+begin_src R :session *R* :tangle tests/test-tamet.r :exports none :eval no
    ################################################################
    # name:tamet
    require(rtamet)
    # or
    #require(devtools)
    #load_all()
    fpath <- system.file("extdata", "Kaleen.csv", package="rtamet")
    fpath
    df  <- read_file(fpath)
    str(df)
    #debug(tamet)
    log <- tamet(filename = fpath,MaxT_column = "maxave",
                 MinT_column = "minave",
                 Vprph09_column = "vprph09",
                 Vprph15_column = "vprph15"
                 )
    log
    head(read_file(log[[2]]))
    #undebug(tamet)
#+end_src
*** man-tamet
#+name:tamet
#+begin_src R :session *R* :tangle man/tamet.Rd :exports none :eval no :padline no
  \name{tamet}
  \alias{tamet}
  %- Also NEED an '\alias' for EACH other topic documented here.
  \title{tamet
  %%  ~~function to do ... ~~
  }
  \description{This is the main function to run the TAMET tests.
  
  }
  \usage{
  tamet(filename, MaxT_column = NA, MaxT_lower = 4.0, MaxT_upper = 50.0, 
      MinT_column = NA) 
  }
  %- maybe also 'usage' for other objects documented here.
  \arguments{
    \item{filename}{
      either a path or file in current directory (log will be written to a CSV with same name alongside this file). 
  %%     ~~Describe \code{x} here~~
  }
      \item{MaxT_column}{
       text string with name of relevant column
  }
  }
  \details{
  %%  ~~ If necessary, more details than the description above ~~
  }
  \value{
    The log will be written alongside the original file.
Invisibly returns a list with number of rows in logfile and path to that file.

  %%  ~Describe the value returned
  %%  If it is a LIST, use
  %%  \item{comp1 }{Description of 'comp1'}
  %%  \item{comp2 }{Description of 'comp2'}
  %% ...
  }
  \references{
  %% ~put references to the literature/web site here ~
  }
  \author{
  ivanhanigan ported original by apsim
  }
  \note{
  %%  ~~further notes~~
  }
  
  %% ~Make other sections like Warning with \section{Warning }{....} ~
  
  \seealso{
  %% ~~objects to See Also as \code{\link{help}}, ~~~
  }
  \examples{
  require(rtamet)
  fpath <- system.file("extdata", "Kaleen.csv", package="rtamet")
  df  <- read_file(fpath)
  log <- tamet(filename = fpath,MaxT_column = "maxave",
               MinT_column = "minave",
               Vprph09_column = "vprph09",
               Vprph15_column = "vprph15"
               )
  head(read_file(log[[2]]))
  
  }
  % Add one or more standard keywords, see file 'KEYWORDS' in the
  % R documentation directory.
  \keyword{ ~kwd1 }
  \keyword{ ~kwd2 }% __ONLY ONE__ keyword per line
  
#+end_src
** MaxT_outside_limits
*** R-MaxT_outside_limits
#+name:MaxT_outside_limits
#+begin_src R :session *R* :tangle R/MaxT_outside_limits.r :exports none :eval no
  ################################################################
  # name:MaxT_outside_limits
  MaxT_outside_limits <- function(input_data_frame,
                                  MaxT = "maxt",
                                  Lower = 4.0,
                                  Upper = 50.0)
    {
      # perform check
      input_data_frame$MaxT_lower_transgression  <- ifelse(input_data_frame[,MaxT] < Lower, 1, 0)
      input_data_frame$MaxT_upper_transgression  <- ifelse(input_data_frame[,MaxT] > Upper, 1, 0)
  
      return(input_data_frame)
    }
  
#+end_src
*** test-MaxT_outside_limits
#+name:MaxT_outside_limits
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:MaxT_outside_limits

#+end_src
*** man-MaxT_outside_limits
#+name:MaxT_outside_limits
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:MaxT_outside_limits

#+end_src
** MinT_outside_limits
*** R-MinT_outside_limits
#+name:MinT_outside_limits
#+begin_src R :session *R* :tangle R/MinT_outside_limits.r :exports none :eval no
    ################################################################
    # name:MinT_outside_limits
    MinT_outside_limits <- function(input_data_frame,
                                    MinT = "mint",
                                    Lower = -12.5,
                                    Upper = 32.0)
      {
        # perform check
        input_data_frame$MinT_lower_transgression  <- ifelse(input_data_frame[,MinT] < Lower, 1, 0)
        input_data_frame$MinT_upper_transgression  <- ifelse(input_data_frame[,MinT] > Upper, 1, 0)
    
        return(input_data_frame)
      }
    
#+end_src
*** test-MinT_outside_limits
#+name:MinT_outside_limits
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:MinT_outside_limits

#+end_src
*** man-MinT_outside_limits
#+name:MinT_outside_limits
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:MinT_outside_limits

#+end_src
** vprph09_equal_vprph15
*** R-vprph09_equal_vprph15
#+name:vprph09_equal_vprph15
#+begin_src R :session *R* :tangle R/vprph09_equal_vprph15.r :exports none :eval no
    ################################################################
    # name:vprph09_equal_vprph15
    vprph09_equal_vprph15 <- function(input_data_frame,
                                    Vprph09 = "vprph09",
                                    Vprph15 = "vprph15")
      {
        # perform check
        input_data_frame$vprph_equal_transgression  <- ifelse(input_data_frame[,Vprph09] == input_data_frame[,Vprph15], 1, 0)
    
        return(input_data_frame)
      }
    
#+end_src
*** test-vprph09_equal_vprph15
#+name:vprph09_equal_vprph15
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:vprph09_equal_vprph15

#+end_src
*** man-vprph09_equal_vprph15
#+name:vprph09_equal_vprph15
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:vprph09_equal_vprph15

#+end_src
** sql_tsfill
*** test-sql_tsfill
#+name:sql_tsfill
#+begin_src R :session *R* :tangle tests/test-sql_tsfill.r :exports none :eval no
  ################################################################
  # name:sql_tsfill
  # # Example use FillCategoryTimeSeries
  # FillTest.csv is a file containing incomplete values for table with columns factorA, factorB, and value
  source("../R/sql_tsfill.r")
  require(sqldf)
  #sparseTable <- read.csv("../FillTest.csv")
  sparseTable <- "factorA, factorB, value
  A, X, 1
  A, Z, 2
  B, Y, 3
  "
  tableIn <- read.csv(textConnection(sparseTable))
  variable1 <- as.data.frame(toupper(letters[1:4]))
  names(variable1) <- 'factorA'
  
  variable2 <- as.data.frame(c(1:3))
  names(variable2) <- 'factorB'
  
  filledTable <- sql_tsfill(tableIn, "value", -1, variable1, variable2)
  #filledTable
  
  correct <- "factorA, factorB, value
  A,       1,    -1
  A,       2,    -1
  A,       3,    -1
  B,       1,    -1
  B,       2,    -1
  B,       3,    -1
  C,       1,    -1
  C,       2,    -1
  C,       3,    -1
  D,       1,    -1
  D,       2,    -1
  D,       3,    -1
  "
  correct <- read.csv(textConnection(correct), stringsAsFactors = FALSE)
  #str(correct)
  #str(filledTable)
  test_that('tsfill returns correct',
            {
              expect_that(identical(filledTable, correct), is_true())
            }
  )
  
#+end_src
*** R-sql_tsfill
#+name:sql_tsfill
#+begin_src R :session *R* :tangle R/sql_tsfill.r :exports none :eval no
################################################################
# name:sql_tsfill
# NB see http://www.ats.ucla.edu/stat/stata/faq/fill_down.htm
# fills a variable in a table for missing combinations of variable1 ... variableN
# returns filled table
# 'variableName' to be filled
# 'fillValue' for filled variable 
# 'variable1' values for category variable 1, where names(variable1) is the name of variable1
# variable2, ...,  variableN - values and names of category variable 2 ... N
sql_tsfill <- function(tableIn, variableName, fillValue, variable1, ...)
{
  argumentNames <- c(deparse(substitute(variable1)), sapply(substitute(list(...))[-1], deparse))
  argumentNames <- paste(collapse = ", ", argumentNames)
  
  categoryExpression <- paste(sep = "", "t1.", names(variable1) ," = t2.", names(variable1))
  otherVariables <- list(...)
  for(variableIndex in 1:length(otherVariables)) 
  {
    variable <- otherVariables[[variableIndex]]
    categoryExpression <- paste(sep="", categoryExpression, "\r\n", " and ", "t1.", names(variable), " = t2.", names(variable))
  }
  
  tableName <- deparse(substitute(tableIn))
  case <- paste(sep = "", "case when ", variableName, " is null then ", fillValue, " else ", variableName, " end")
  joinExpression <- paste(sep = "", "(select * from ", argumentNames,") ", "\r\n", "t1 left join ", tableName, " t2 on ", "\r\n", categoryExpression)
  sql <- paste(sep = "", "select t1.*, ", "\r\n", case, "\r\n", " as ", variableName, " from ", "\r\n", joinExpression)
  
  tableOut <-  sqldf(sql, drv = 'SQLite')
  
  return(tableOut)
}



#+end_src
*** man-sql_tsfill
#+name:sql_tsfill
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:sql_tsfill

#+end_src

*** COMMENT versions
**** Ian's orig src-FillCategoryTimeSeries
#+name:FillCategoryTimeSeries
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:FillCategoryTimeSeries

# fills a variable in a table for missing combinations of variable1 ... variableN
# returns filled table
# 'variableName' to be filled
# 'fillValue' for filled variable 
# 'variable1' values for category variable 1, where names(variable1) is the name of variable1
# variable2, ...,  variableN - values and names of category variable 2 ... N
FillCategoryTimeSeries<-function(tableIn, variableName, fillValue, variable1, ...)
{
  argumentNames <- c(deparse(substitute(variable1)), sapply(substitute(list(...))[-1], deparse))
  argumentNames <- paste(collapse = ", ", argumentNames)
  
  categoryExpression <- paste(sep = "", "t1.", names(variable1) ," = t2.", names(variable1))
  otherVariables <- list(...)
  for(variableIndex in 1:length(otherVariables)) 
  {
    variable <- otherVariables[[variableIndex]]
    categoryExpression <- paste(sep="", categoryExpression, "\r\n", " and ", "t1.", names(variable), " = t2.", names(variable))
  }
  
  tableName <- deparse(substitute(tableIn))
  case <- paste(sep = "", "case when ", variableName, " is null then ", fillValue, " else ", variableName, " end")
  joinExpression <- paste(sep = "", "(select * from ", argumentNames,") ", "\r\n", "t1 left join ", tableName, " t2 on ", "\r\n", categoryExpression)
  sql <- paste(sep = "", "select t1.*, ", "\r\n", case, "\r\n", " as ", variableName, " from ", "\r\n", joinExpression)
  
  tableOut <-  sqldf(sql, drv = 'SQLite')
  
  return(tableOut)
}

# # Example use FillCategoryTimeSeries
# # FillTest.csv is a file containing incomplete values for table with columns factorA, factorB, and value
# 
# sparseTable <- read.csv("FillTest.csv") 
# 
# variable1 = as.data.frame(toupper(letters[1:4]))
# names(variable1) <- 'factorA'
# 
# variable2 =  as.data.frame(c(1:3))
# names(variable2) <- 'factorB'
# 
# filledTable = FillCategoryTimeSeries(tableIn, "value", -1, variable1, variable2)
# 


#+end_src


** tsfill
*** R-tsfill
#+name:tsfill
#+begin_src R :session *R* :tangle no :exports none :eval no
  ################################################################
  # name:tsfill
  tsfill <- function(x,
                     col_names = c("date", "rainfall"),
                     timestep = "daily",
                     startdate="min",
                     enddate="max"){
  # check col_names are valid
  
  # set start/end    
      if(startdate == "min")
  
  # do seq and join       
      if (timestep == "daily"){
  
      } else if (timestep == "month" | timestep == "monthly"){        
          data.period.start <- seq(as.Date(start), as.Date(end), by = 'month')
      } else {
          stop("Unsupported timestep, only 'daily' and 'month' are currently supported")
      }
  }
  
  
  # notes
  https://github.com/ivanhanigan/HutchinsonDroughtIndex/blob/master/src/HutchinsonDroughtIndex_load.r
  lines 176-199
  
    df <- read.csv(paste('IDCJAC0001_', filename,'_Data1.csv',sep=''))
    df$date <- as.Date(paste(df$Year,df$Month,1,sep='-'))
    #df<-subset(df,Quality == 'Y',select=c(date,Year,Month,Monthly.Precipitation.Total..millimetres.))
    head(df)
    fulldaterange <- as.data.frame(seq(min(df$date),max(df$date),1))
    fulldaterange$day <- substring(fulldaterange[,1],9,10)
    fulldaterange <- subset(fulldaterange, day == '01')
    names(fulldaterange) <- c('date','day')
    df2 <- merge(fulldaterange,df,all.x=T)
    df2 <- subset(df2, select = c(date,Year, Month,Monthly.Precipitation.Total..millimetres.))
    # what happens with NAs?
    # stupid impute
    df2$rain <- as.numeric(0)
    # subset(df2,is.na(df2$Monthly.Precipitation.Total..millimetres.))
    df2$month <- substring(df2[,'date'],6,7)
    df2$year <- substring(df2[,'date'],1,4)
   
      for(i in 1:nrow(df2)){
        # i <- 1
        mm <- df2[i,'month']
        df2$rain[i] <- ifelse(is.na(df2$Monthly.Precipitation.Total..millimetres.[i]),
        mean(subset(df2, month == mm,select = c(Monthly.Precipitation.Total..millimetres.)),na.rm=T),
             df2$Monthly.Precipitation.Total..millimetres.[i])
        }
  
  I should re-write this whole bit using apply() stuff, and do a clever-er impute with nearest neighbour obs in space and time...
  
#+end_src
*** test-tsfill
#+name:tsfill
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:tsfill

#+end_src
*** man-tsfill
#+name:tsfill
#+begin_src R :session *R* :tangle no :exports none :eval no
################################################################
# name:tsfill
daily, monthly and annual rainfall and temperature data for all Bureau of Meteorology weather stations are freely available here: http://www.bom.gov.au/climate/data/ when you download data you get a zip file with 2 csv files, a wide and tall table listing the observations. So the difference between the two tables 'should' be just the format. HOWEVER, yesterday I noticed that the wide table (*Data12.csv) contains ‘null’ when data is not available, however the tall table (*Data1.csv) simply  OMITS ‘null’ values. This inconsistency can be problematic sometimes, i.e. when using time series (ts) in R, as the number of dates varies between the tables with different format. Ideally, both tables should contain NA or ‘null’ when the observation is not available.
http://www.bom.gov.au/jsp/ncc/cdio/weatherData/av?p_display_type=dailyZippedDataFile&p_stn_num=072038&p_c=-1037891091&p_nccObsCode=136&p_startYear=2013

#+end_src
